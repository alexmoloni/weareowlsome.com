@function toRem($pixels, $root) {
  @return $pixels / $root;
}

@function rem($pixels) {
  $value: toRem($pixels, $rootFontSize);
  @return $value * 1rem;
}

@function em($pixels, $root) {
  @return $pixels / $root * 1em;
}

@function toVw($value, $offset: 0, $viewportWidth: 1920) {
  $size: $value / $viewportWidth * 100vw;
  @if ($offset > 0) {
    $size: $size + $offset;
  }
  @return $size;
}

@function toVwMobile($value, $offset: 0, $viewportWidth: 414) {
  $size: $value / $viewportWidth * 100vw;
  @if ($offset > 0) {
    $size: $size + $offset;
  }
  @return $size;
}

@mixin minw($br) {
  @media (min-width: $br) {
    @content;
  }
}

@mixin maxw($br) {
  @media (max-width: $br) {
    @content;
  }
}

@mixin shineAnimation() {
  overflow: hidden;
  position: relative;

  &:before {
    content: '';
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform: translateX(-100%);
    background: linear-gradient(30deg, #ffd401 0%, #ffeb96 50%, #ffeb96 51%, #ffd401 100%);
  }

  &:hover {
    &:before {
      animation: shine 0.3s ease-out;
    }
  }
}

//to use on btn element containing the <a> elem and <i> elem
@mixin ctaButtonLayout() {
  a, .txt {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    flex: 1 1 auto;
    position: relative;
    z-index: 20;
  }
  i {
    display: inline-block;
    background-image: url(/assets/images/btns/arrow-right.png);
    background-size: contain;
    background-repeat: no-repeat;
    background-position: 50% 50%;
    vertical-align: middle;
  }

}

//to use on btn element containing the <a> elem and <i> elem
@mixin animateArrow() {
  &:hover {
    i {
      animation: arrow 0.5s ease-out;
      animation-fill-mode: both;
    }
  }
}

@mixin standardArrow() {
  .arrow-right {
    width: 8px;
    height: 16px;
    margin-left: 35px;
  }
}

@mixin yellowBtnSmall() {
  width: 204px;
  height: 34px;
  font-size: 15px;
  background-color: $ctaColor;
  color: $color1;

  a, .txt {
    padding-left: 52px;
  }
}

@mixin prefix($what, $value) {
  -webkit-#{$what}: #{$value};
  -moz-#{$what}: #{$value};
  -ms-#{$what}: #{$value};
  -o-#{$what}: #{$value};
  #{$what}: #{$value};
}

//underline on hover - used inside an after element
@mixin underline-on-hover($bgc: $color1, $height: 2px, $bottom: -16px ) {
  content: '';
  display: block;
  bottom: $bottom;
  width: 100%;
  height: $height;
  background-color: $bgc;
  transition: all 0.2s;
  position: absolute;
}

@mixin basicTransition() {
  transition: all 0.2s;
}

@mixin basicTransitionLong() {
  transition: all 0.6s;
}

@mixin with-css-background() {
  background-repeat: no-repeat;
  background-size: contain;
  background-position: 50% 50%;
}

@mixin blockAfterorBefore($width: 20px, $height: 20px) {
  content: '';
  display: block;
  width: $width;
  height: $height;
}

@mixin basicBoxAndInputShadow() {
  border-radius: 4px;
  box-shadow: 0px 2px 4px 0 rgba(0, 0, 0, 0.1);
  border: solid 1px #ebebeb;
}

@mixin headerShadowAndBorder() {
  box-shadow: 0px 17px 15px 5px rgba(0, 0, 0, 0.1);
  border-bottom: solid 1px #dbdbdb;
}

@mixin resetList() {
  padding: 0;
  list-style-type: none;
  margin: 0;
  line-height: 1;
}

@mixin fitFigurePictureImg() {
  figure, picture, img {
    width: 100%;
    height: 100%;
  }

  img {
    object-position: center;
    object-fit: cover;
  }
}